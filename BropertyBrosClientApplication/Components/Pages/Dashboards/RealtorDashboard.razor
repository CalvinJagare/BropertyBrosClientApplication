@page "/realtordashboard"
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Blazored.LocalStorage
@using BropertyBrosClientApplication.Services.Realtor
@inject ILocalStorageService LocalStorage
@inject IRealtorService RealtorService
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg p-4 w-75">
        <div class="row">
            <div class="col-md-4 text-center">
                <img src="@user?.ProfileUrl" alt="Profile Picture" class="img-thumbnail profile-picture mb-3" />
                <h3>@($"{user?.FirstName} {user?.LastName}")</h3>
                <p><strong>Email:</strong> <a href="mailto:@user?.Email">@user?.Email</a></p>
                <p><strong>Phone:</strong> @user?.PhoneNumber</p>
                @if (!string.IsNullOrEmpty(user?.LogoUrl))
                {
                    <div class="mt-4">
                        <img src="@user.LogoUrl" alt="Firm Logo" class="img-thumbnail firm-logo" />
                        <p class="mt-2"><strong>@user.CompanyName</strong></p>
                    </div>
                }
            </div>

            <div class="col-md-8">
                <h4 class="text-center mb-4">Dashboard Options</h4>
                <div class="d-flex flex-column align-items-center gap-4">
                    @foreach (var card in Cards)
                    {
                        <div class="card shadow-sm custom-card-width">
                            <div class="card-header gradient-header text-white">
                                @((MarkupString)card.Header)
                            </div>
                            <div class="card-body">
                                <ul class="list-group list-group-flush">
                                    @foreach (var option in card.Options)
                                    {
                                        <li class="list-group-item">
                                            <a href="@option.Href" class="text-decoration-none">@option.Text</a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RealtorReadDto? user;
    private List<Card> Cards = new()
    {
        new Card
        {
            Header = "<i class='fa-solid fa-house-user'></i> Manage My Properties",
            Options = new List<Option>
            {
                new Option { Text = "Property Overview", Href = "/propertyoverview" },
                new Option { Text = "Create Property", Href = "/createproperty" },
                new Option { Text = "Update Property", Href = "/updateproperty" },
                new Option { Text = "Delete Property", Href = "/deleteproperty" }
            }
        },
        new Card
        {
            Header = "<i class='fa-solid fa-person'></i> Manage My Info",
            Options = new List<Option>
            {
                new Option { Text = "View Profile", Href = "/realtoroverview/{realtorId:int}" },
                new Option { Text = "Update Profile", Href = "/updaterealtor" },
                new Option { Text = "Change Password", Href = "/" }
            }
        }
    };

    private class Card
    {
        public string Header { get; set; } = string.Empty;
        public List<Option> Options { get; set; } = new();
    }

    private class Option
    {
        public string Text { get; set; } = string.Empty;
        public string Href { get; set; } = string.Empty;
    }

    // fixa
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch the token from local storage
            var token = await LocalStorage.GetItemAsStringAsync("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/users/login");
                return;
            }

            // Decode the token to extract user ID or email
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            var userIdClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            if (int.TryParse(userIdClaim, out var userId))
            {
                // Fetch user details using RealtorService
                var response = await RealtorService.GetRealtorByIdAsync(userId);
                if (response.Success)
                {
                    user = response.Data;
                }
                else
                {
                    Console.WriteLine($"Error fetching user details: {response.Message}");
                }
            }
            else
            {
                Console.WriteLine("Invalid user ID in token.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing dashboard: {ex.Message}");
        }
    }
}