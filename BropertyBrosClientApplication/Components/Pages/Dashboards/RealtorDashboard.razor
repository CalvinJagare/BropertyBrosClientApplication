@page "/realtordashboard"
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Blazored.LocalStorage
@using BropertyBrosClientApplication.Services.Realtor
@inject AuthenticationStateProvider authStateProvider
@inject IRealtorService RealtorService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@* Author: Arlind, Calvin, Emil *@

@if (string.IsNullOrEmpty(errorMessage) == false)
{
    <div class="alert alert-danger">
        <p>@errorMessage</p>
    </div>
}
@if (string.IsNullOrEmpty(responseMessage) == false)
{
    <div class="alert alert-success">
        <p>Realtor Added!</p>
    </div>
}

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg p-4 w-100 d-flex flex-row">
        <div class="box col-md-4 text-center realtor-dashboard-profile me-4">
            <img src="@realtor?.ProfileUrl" alt="Profile Picture" class="profile-picture mb-3" />
            <h3>@($"{realtor?.FirstName} {realtor?.LastName}")</h3>
            <p><strong>Email:</strong> <a href="mailto:@realtor?.Email">@realtor?.Email</a></p>
            <p><strong>Phone:</strong> @realtor?.PhoneNumber</p>
            @if (!string.IsNullOrEmpty(realtor?.LogoUrl))
            {
                <div class="mt-4">
                    <img src="@realtor.LogoUrl" alt="Firm Logo" class="img-thumbnail firm-logo" />
                    <p class="mt-2"><strong>@realtor.CompanyName</strong></p>
                </div>
            }
        </div>

        <div class="col-md-8">
            <h4 class="text-center mb-4">Dashboard Options</h4>
            <div class="d-flex flex-column align-items-center gap-4">
                @if (Cards.Count > 0)
                {
                    @foreach (var card in Cards)
                    {
                        <div class="card shadow-sm custom-card-width">
                            <div class="card-header gradient-header text-white">
                                @((MarkupString)card.Header)
                            </div>
                            <div class="card-body">
                                <ul class="list-group list-group-flush">
                                    @foreach (var option in card.Options)
                                    {
                                        <li class="list-group-item">
                                            <a href="@option.Href" class="text-decoration-none">@option.Text</a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>


@code {
    string? responseMessage;
    string? errorMessage;

    private RealtorReadDto? realtor;
    private List<Card> Cards = new()
            {
                new Card
                {
                    Header = "<i class='fa-solid fa-house-user'></i> Manage My Properties",
                    Options = new List<Option>
                    {
                        new Option { Text = "Property Overview", Href = $"/realtorpropertyoverview/" },
                        new Option { Text = "Create Property", Href = $"/realtorcreateproperty/" },
                        new Option { Text = "Update Property", Href = $"/realtorupdateproperty/" },
                        new Option { Text = "Delete Property", Href = $"/realtordeleteproperty/" }
                    }
                },
                new Card
                {
                    Header = "<i class='fa-solid fa-person'></i> Manage My Info",
                    Options = new List<Option>
                    {
                        new Option { Text = "My Profile", Href = $"/realtorrealtordetails/" },
                        new Option { Text = "Change Password", Href = "/" }
                    }
                }
            };

    private class Card
    {
        public string Header { get; set; } = string.Empty;
        public List<Option> Options { get; set; } = new();
    }

    private class Option
    {
        public string Text { get; set; } = string.Empty;
        public string Href { get; set; } = string.Empty;
    }

    // fixa
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IEnumerable<Claim>? claims = await ((ApiAuthStateProvider)authStateProvider).GetClaims();

                if (claims == null)
                {
                    NavigationManager.NavigateTo("users/login");
                    return;
                }

                string? realtorId = claims.FirstOrDefault(x => x.Type == "rid")?.Value;

                var response = await RealtorService.GetRealtorByIdAsync(Convert.ToInt32(realtorId));

                if (response.Success)
                {
                    realtor = response.Data;
                    responseMessage = response.Message;

                    StateHasChanged();
                }
                else
                {
                    errorMessage = response.Message;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
                StateHasChanged();
            }
        }
    }
}