@page "/propertydetails/{PropertyId:int}"
@using BropertyBrosClientApplication.Services.RealtorFirm
@inject IPropertyService PropertyService
@inject IRealtorService RealtorService
@inject IRealtorFirmService RealtorFirmService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@* Author: Calvin *@

<AuthorizeView Roles="Admin,User" Context="authContext">
    <Authorized>
        <div class="container py-5">
            @if (property == null)
            {
                <p class="text-center">Loading property details...</p>
            }
            else
            {
                <div class="text-center mb-4">
                    <h1 class="dashboard-title">@property.Address</h1>
                    <p class="text-muted">@property.CityName</p>
                </div>

                @if (property.ImageUrls != null && property.ImageUrls.Any())
                {
                    <div class="custom-carousel mb-5">
                        <div class="carousel-slides">
                            @for (int i = 0; i < property.ImageUrls.Count; i++)
                            {
                                <div class="carousel-slide @(i == 0 ? "active" : "")">
                                    <img src="@property.ImageUrls.ElementAt(i)" alt="Property Image" class="img-fluid rounded">
                                </div>
                            }
                        </div>
                        <button class="carousel-control prev" @onclick="ShowPreviousSlide">&#10094;</button>
                        <button class="carousel-control next" @onclick="ShowNextSlide">&#10095;</button>
                    </div>
                }
                else
                {
                    <p class="text-center">No images available for this property.</p>
                }

                <div class="card shadow-sm mb-5">
                    <div class="card-body">
                        <h5 class="card-title">Property Details</h5>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item"><strong><i class="fa-solid fa-money-bill"></i>&nbsp; Price:</strong> $@property.Price</li>
                            <li class="list-group-item"><strong><i class="fa-solid fa-chart-area"></i>&nbsp; Living Area:</strong> @property.LivingAreaKvm m²</li>
                            <li class="list-group-item"><strong><i class="fa-solid fa-person-shelter"></i>&nbsp; Number of Rooms:</strong> @property.NumberOfRooms</li>
                            <li class="list-group-item"><strong><i class="fa-solid fa-calendar"></i>&nbsp; Build Year:</strong> @property.BuildYear</li>
                            <li class="list-group-item"><strong><i class="fa-solid fa-list"></i>&nbsp; Category:</strong> @property.CategoryName</li>
                            <li class="list-group-item"><strong><i class="fa-solid fa-mountain"></i>&nbsp; Land Area:</strong> @property.LandAreaKvm m²</li>
                            <li class="list-group-item"><strong><i class="fa-solid fa-sink"></i>&nbsp; Ancillary Area:</strong> @property.AncillaryAreaKvm m²</li>
                            <li class="list-group-item"><strong><i class="fa-solid fa-money-bills"></i>&nbsp; Monthly Fee:</strong> $@property.MonthlyFee</li>
                            <li class="list-group-item"><strong><i class="fa-solid fa-dollar-sign"></i>&nbsp; Yearly Fee:</strong> $@property.YearlyFee</li>
                            <li class="list-group-item"><strong><i class="fa-solid fa-comments"></i>&nbsp; Description:</strong> @property.Description</li>
                        </ul>
                    </div>
                </div>

                @if (realtor != null)
                {
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">Realtor Information</h5>
                            <div class="d-flex align-items-center">
                                @if (!string.IsNullOrEmpty(realtor.ProfileUrl))
                                {
                                    <img src="@realtor.ProfileUrl" alt="Realtor Profile" class="img-thumbnail me-3" style="width: 100px; height: 100px; object-fit: cover;">
                                }
                                <div>
                                    <p><strong><i class="fa-solid fa-person"></i>&nbsp;Name:</strong> <a href="/PersonalRealtorPage/@realtor.Id"> @realtor.FirstName @realtor.LastName</a></p>
                                    <p><strong><i class="fa-solid fa-envelope"></i>&nbsp;Email:</strong> <a href="">@realtor.Email</a></p>
                                    <p><strong><i class="fa-solid fa-phone"></i>&nbsp;Phone:</strong> <a href="">@realtor.PhoneNumber</a></p>
                                    <p><strong><i class="fa-solid fa-building"></i>&nbsp;Company:</strong> <a href="/listoffirms">@realtor.CompanyName</a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <p class="text-center">Loading realtor information...</p>
                }

                <div class="text-center mt-4">
                    <button class="btn btn-secondary" @onclick="GoBack">Back</button>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="d-flex justify-content-center align-items-center vh-100">
            <div class="text-center alert alert-danger">
                <h3>Admins and realtors only</h3>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int PropertyId { get; set; }

    private Services.PropertyReadDto? property;
    private Services.RealtorReadDto? realtor;
    private int currentSlideIndex = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var apiResponse = await PropertyService.GetPropertyByIdAsync(PropertyId);
            if (apiResponse.Success)
            {
                property = apiResponse.Data;
                if (property?.RealtorId != null)
                {
                    var realtorResponse = await RealtorService.GetRealtorByIdAsync(property.RealtorId);
                    if (realtorResponse.Success)
                    {
                        realtor = realtorResponse.Data;
                    }
                    else
                    {
                        Console.WriteLine($"Failed to load realtor: {realtorResponse.Message}");
                    }
                }
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Failed to load property: {apiResponse.Message}");
            }
        }
    }

    private async Task ShowNextSlide()
    {
        if (property?.ImageUrls != null)
        {
            currentSlideIndex = (currentSlideIndex + 1) % property.ImageUrls.Count;
            await JSRuntime.InvokeVoidAsync("updateCarousel", currentSlideIndex);
        }
    }

    private async Task ShowPreviousSlide()
    {
        if (property?.ImageUrls != null)
        {
            currentSlideIndex = (currentSlideIndex - 1 + property.ImageUrls.Count) % property.ImageUrls.Count;
            await JSRuntime.InvokeVoidAsync("updateCarousel", currentSlideIndex);
        }
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
