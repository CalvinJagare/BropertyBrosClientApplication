@page "/deletecity"
@rendermode InteractiveServer
@using BropertyBrosClientApplication.DTO.City
@using BropertyBrosClientApplication.Services
@inject ICityService CityService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


@* Author: Arlind *@

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="container">
        <h1 class="dashboard-title text-center mb-4">Delete City</h1>

        <div class="card shadow-sm p-4 gradient-card">
            @if (cities == null)
            {
                <p class="text-center">Loading cities...</p>
            }
            else
            {
                <div class="mb-3">
                    <label for="cityDropdown" class="form-label">Select a City</label>
                    <select id="cityDropdown" class="form-select" @bind="selectedCityId">
                        <option value="">-- Select a City --</option>
                        @foreach (var city in cities)
                        {
                            <option value="@city.Id">@city.CityName</option>
                        }
                    </select>
                </div>

                <div class="text-center mb-3">
                    <button class="btn btn-danger" @onclick="ConfirmDelete">
                        Delete Selected City
                    </button>
                </div>

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <p class="text-success text-center">@successMessage</p>
                }

                @if (!string.IsNullOrEmpty(deleteMessage))
                {
                    <p class="text-danger text-center">@deleteMessage</p>
                }

            }
        </div>
        <div class="text-center mt-3">
            <button class="btn btn-secondary" @onclick="GoBack">Back</button>
        </div>
    </div>
</div>

@code {
    private List<Services.CityReadDto>? cities;
    private int? selectedCityId;
    private string? deleteMessage;
    private string? successMessage;

    private bool hasLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await CityService.GetAllCities();
            if (response.Success)
            {
                cities = response.Data;
            }
            else
            {
                deleteMessage = "Failed to load cities.";
            }
            hasLoaded = true;

            StateHasChanged();
        }
    }

   
    private async Task ConfirmDelete()
    {
        
        deleteMessage = null;
        successMessage = null;

        if (!selectedCityId.HasValue)
        {
            deleteMessage = "Please select a city.";
            return;
        }

        var city = cities?.FirstOrDefault(c => c.Id == selectedCityId.Value);
        if (city == null)
        {
            deleteMessage = "Selected city not found.";
            return;
        }

        
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the city '{city.CityName}'?");
        if (!confirm)
        {
            deleteMessage = "Deletion cancelled.";
            return;
        }

        var deleteResponse = await CityService.DeleteCity(selectedCityId.Value);
        if (deleteResponse != null && deleteResponse.Success)
        {
            successMessage = $"City '{city.CityName}' has been deleted.";
            deleteMessage = null;

            
            cities?.Remove(city);
            selectedCityId = null;
        }
        else
        {
            deleteMessage = "Failed to delete the city.";
            successMessage = null;
        }
    }



    private void GoBack()
    {
        NavigationManager.NavigateTo("/admindashboard");
    }
}
