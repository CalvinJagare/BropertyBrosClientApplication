@page "/PersonalRealtorPage/{id:int}"
@using BropertyBrosClientApplication.Services.Property
@using System.Diagnostics
@inject IRealtorService RealtorService
@inject IPropertyService PropertyService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@*Author: Daniel, Calvin*@

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg p-4 w-100 d-flex flex-row">
        <div class="box col-md-4 text-center realtor-dashboard-profile me-4">
            @if (realtor == null)
            {
                <h1 class="text-center">Realtor Details</h1>
                <p class="text-center">Loading...</p>
            }
            else
            {
                <img src="@realtor.ProfileUrl" alt="Realtor Profile" class="profile-picture mb-3" />
                <h3>@($"{realtor.FirstName} {realtor.LastName}")</h3>
                <p><strong>Email:</strong> <a href="mailto:@realtor.Email">@realtor.Email</a></p>
                <p><strong>Phone:</strong> @realtor.PhoneNumber</p>
                @if (!string.IsNullOrEmpty(realtor.LogoUrl))
                {
                    <div class="mt-4">
                        <img src="@realtor.LogoUrl" alt="Company Logo" class="img-thumbnail firm-logo" />
                        <p class="mt-2"><strong>@realtor.CompanyName</strong></p>
                        <p><strong>Website:</strong> <a href="@realtor.WebsiteUrl" target="_blank">@realtor.WebsiteUrl</a></p>
                    </div>
                }
            }
            
        </div>

        <div class="col-md-8">
            @if (properties == null)
            {
                <p class="text-center">Loading properties...</p>
            }
            else if (!properties.Any())
            {
                <p class="text-center">No properties found for this realtor.</p>
            }
            else
            {
                <div class="d-flex flex-column gap-4">
                    @foreach (var property in properties)
                    {
                        <div class="card shadow-sm custom-card-width">
                            <div class="row g-0">
                                <div class="col-md-4">
                                    <img src="@(property.ImageUrls?.FirstOrDefault())" class="img-fluid rounded-start" alt="Property Image">
                                </div>
                                <div class="col-md-8">
                                    <div class="card-body">
                                        <h5 class="card-title">@property.Address</h5>
                                        <p class="card-text text-muted">@property.CityName</p>
                                        <p class="card-text"><strong>Living Area:</strong> @property.LivingAreaKvm m²</p>
                                        <p class="card-text"><strong>Total Costs:</strong> $@(property.Price + property.MonthlyFee + property.YearlyFee)</p>
                                        <button class="btn btn-primary" @onclick="() => NavigateToPropertyDetails(property.Id)">Read More</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>  
</div>


@code {
    private RealtorReadDto? realtor;
    private List<PropertyReadDto>? properties;

    [Parameter]
    public int id { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var propertyResponse = await PropertyService.GetPropertiesByRealtorAsync(id);
                var realtorResponse = await RealtorService.GetRealtorByIdAsync(id);

                properties = propertyResponse.Success ? propertyResponse.Data : new List<Services.PropertyReadDto>();
                if (!propertyResponse.Success)
                {
                    Debug.WriteLine($"Error fetching realtors: {propertyResponse}");
                }
                realtor = realtorResponse.Success ? realtorResponse.Data : new Services.RealtorReadDto();
                if (!realtorResponse.Success)
                {
                    Debug.WriteLine($"Error fetching realtors: {realtorResponse}");
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error fetching data: {ex.Message}");
            }
        }
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private void NavigateToPropertyDetails(int propertyId)
    {
        NavigationManager.NavigateTo($"/propertydetails/{propertyId}");
    }
}
