@page "/testpageupdateProperty"
@using BropertyBrosClientApplication.DTO.CategoryDto
@using BropertyBrosClientApplication.DTO.Properties
@using BropertyBrosClientApplication.Services
@inject PropertyService PropertyService
@rendermode InteractiveServer

@*Author: Daniel*@
<h3>Update Property</h3>

<div>
    <label for="PropertyId">Property ID:</label>
    <input id="PropertyId" @bind="PropertyId" type="number" />
    <button @onclick="LoadProperty">Load Realtor</button>
</div>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (PropertyToUpdate != null)
{
    <EditForm Model="PropertyToUpdate" OnValidSubmit="UpdateProperty">
        <div>
            <label for="Address">Address:</label>
            <input id="Address" @bind="PropertyToUpdate.Address"/>
            <label for="Price">Price:</label>
            <input id="Price" @bind="PropertyToUpdate.Price" />
            <label for="MonthlyFee">MontlyFee:</label>
            <input id="MonthlyFee" @bind="PropertyToUpdate.MonthlyFee" />
            <label for="YearlyFee">YearlyFee:</label>
            <input id="YearlyFee" @bind="PropertyToUpdate.YearlyFee" />
            <label for="LivingAreaKvm">LivingAreaKvm:</label>
            <input id="LivingAreaKvm" @bind="PropertyToUpdate.LivingAreaKvm" />
            <label for="AncillaryAreaKvm">AncillaryAreaKvm:</label>
            <input id="AncillaryAreaKvm" @bind="PropertyToUpdate.AncillaryAreaKvm" />
            <label for="LandAreaKvm">LandAreaKvm:</label>
            <input id="LandAreaKvm" @bind="PropertyToUpdate.LandAreaKvm" />
            <label for="Description">Description:</label>
            <input id="Description" @bind="PropertyToUpdate.Description" />
            <label for="NumberOfRooms">NumberOfRooms:</label>
            <input id="NumberOfRooms" @bind="PropertyToUpdate.NumberOfRooms" />
            <label for="BuildYear">BuildYear:</label>
            <input id="BuildYear" @bind="PropertyToUpdate.BuildYear" />
            <label for="ImageUrls">Image URLs:</label>
            @for (int i = 0; i < PropertyToUpdate.ImageUrls.Count; i++)
            {
                var index = i; // avoid modified closure issue
                <input class="form-control mb-2"
                       value="@PropertyToUpdate.ImageUrls.ToList()[index]"
                       @oninput="e => UpdateImageUrl(index, e.Value?.ToString())" />
            }

        </div>
        <button type="submit">Update</button>
    </EditForm>
}
else if (ErrorMessage != null)
{
    <p style="color: red;">@ErrorMessage</p>
}
@code {
    private int PropertyId;
    private Services.PropertyCreateDto PropertyToUpdate = new();
    private bool IsLoading = false;
    private string? ErrorMessage;

    private async Task LoadProperty()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            var property = await PropertyService.GetPropertyByIdAsync(PropertyId);
            PropertyToUpdate = new Services.PropertyCreateDto
            {
					Address = property.Address,
					Price = property.Price,
                    MonthlyFee = property.MonthlyFee,
                    YearlyFee = property.YearlyFee,
					LivingAreaKvm = property.LivingAreaKvm,
					AncillaryAreaKvm = property.AncillaryAreaKvm,
                    LandAreaKvm = property.LandAreaKvm,
					Description = property.Description,
					NumberOfRooms = property.NumberOfRooms,
                    BuildYear = property.BuildYear,
					ImageUrls = property.ImageUrls,
					RealtorId = property.RealtorId,
					CityId = property.CityId,
					CategoryId = property.CategoryId,
            };

        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load category: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task UpdateProperty()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;
			await PropertyService.UpdatePropertyAsync(PropertyId, PropertyToUpdate);
			ErrorMessage = "Property updated successfully!";
        }
		catch (Exception ex)
		{
			ErrorMessage = $"Failed to update property: {ex.Message}";
		}
		finally
		{
			IsLoading = false;
		}
    }

    private void UpdateImageUrl(int index, string? value)
    {
        if (value is null) return;
        var list = PropertyToUpdate.ImageUrls.ToList();
        list[index] = value;
        PropertyToUpdate.ImageUrls = list;
    }
}
