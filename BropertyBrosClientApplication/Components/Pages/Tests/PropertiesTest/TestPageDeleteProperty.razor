@page "/TestPageDeleteProperty"
@using BropertyBrosClientApplication.DTO.Properties
@using BropertyBrosClientApplication.Services
@inject PropertyService PropertyService
@rendermode InteractiveServer

@*Author: Daniel*@
<h1>Delete Property</h1>
@if(isLoading)
{
	<p>Loading Properties</p>
}
else if(isDeleted)
{
	<p class="text-success">Property deleted successfully!</p>
}
else
{
	<div>
		<label for="propertySelect">Select a property to delete:</label>
		<select id="propertySelect" @bind="selectedPropertyId">
			<option value="">-- Select a property --</option>
			@foreach (var property in properties)
			{
				<option value="@property.Id">@property.Address</option>
			}
		</select>
		<button class="btn btn-primary" @onclick="LoadPropertyDetails" disabled="@(string.IsNullOrEmpty(selectedPropertyId.ToString()))">Load</button>

		@if (propertyToDelete != null)
		{
			<p>Are you sure you want to delete the category: <strong>@propertyToDelete.Address</strong>?</p>
			<button class="btn btn-danger" @onclick="DeleteProperty">Delete</button>
			<button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
		}
	</div>
}

@code {
	private List<PropertyReadDto>? properties;
	private int? selectedPropertyId;
	private PropertyReadDto? propertyToDelete;
	private bool isLoading = true;
	private bool isDeleted = false;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			properties = await PropertyService.GetAllPropertiesAsync();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading data: {ex.Message}");
		}
		finally
		{
			isLoading = false;
		}
	}

	private async Task LoadPropertyDetails()
	{
		if (selectedPropertyId.HasValue)
		{
			try
			{
				propertyToDelete = await PropertyService.GetPropertyByIdAsync(selectedPropertyId.Value);
			}
			catch
			{
				propertyToDelete = null;
			}
		}
	}

	private async Task DeleteProperty()
	{
		if (selectedPropertyId.HasValue)
		{
			try
			{
				isLoading = true;
				await PropertyService.DeletePropertyAsync(selectedPropertyId.Value);
				isDeleted = true;
				properties = properties?.Where(p => p.Id != selectedPropertyId.Value).ToList();
				propertyToDelete = null;
			}
			catch
			{
				propertyToDelete = null;
			}
			finally
			{
				isLoading = false;
			}
		}
	}

	private void CancelDelete()
	{
		propertyToDelete = null;
	}
}
