@page "/testpagesearchproperties"
@using BropertyBrosClientApplication.DTO.CategoryDto
@using BropertyBrosClientApplication.DTO.City
@using BropertyBrosClientApplication.DTO.Properties
@using BropertyBrosClientApplication.DTO.Realtor
@using BropertyBrosClientApplication.Services
@inject CategoryService categoryService
@inject CityService cityService
@inject PropertyService propertyService
@rendermode InteractiveServer

@* Author: Emil, AI *@

<input type="number" @bind="propertySearchDto.MinPrice" placeholder="Enter minimum price" />
<input type="number" @bind="propertySearchDto.MaxPrice" placeholder="Enter maximum price" />
<br />
<input type="number" @bind="propertySearchDto.MinMonthlyFee" placeholder="Enter minimum monthly fee" />
<input type="number" @bind="propertySearchDto.MaxMonthlyFee" placeholder="Enter maximum monthly fee" />
<br />
<input type="number" @bind="propertySearchDto.MinYearlyFee" placeholder="Enter minimum yearly fee" />
<input type="number" @bind="propertySearchDto.MaxYearlyFee" placeholder="Enter maximum yearly fee" />
<br />
<input type="number" @bind="propertySearchDto.MinLivingAreaKvm" placeholder="Enter minimum living area (kvm)" />
<input type="number" @bind="propertySearchDto.MaxLivingAreaKvm" placeholder="Enter maximum living area (kvm)" />
<br />
<input type="number" @bind="propertySearchDto.MinAncillaryAreaKvm" placeholder="Enter minimum ancillary area (kvm)" />
<input type="number" @bind="propertySearchDto.MaxAncillaryAreaKvm" placeholder="Enter maximum ancillary area (kvm)" />
<br />
<input type="number" @bind="propertySearchDto.MinLandAreaKvm" placeholder="Enter minimum land area (kvm)" />
<input type="number" @bind="propertySearchDto.MaxLandAreaKvm" placeholder="Enter maximum land area (kvm)" />
<br />
<input type="number" @bind="propertySearchDto.MinNumberOfRooms" placeholder="Enter minimum number of rooms" />
<input type="number" @bind="propertySearchDto.MaxNumberOfRooms" placeholder="Enter maximum number of rooms" />
<br />
<input type="number" @bind="propertySearchDto.MinBuildYear" placeholder="Enter minimum build year" />
<input type="number" @bind="propertySearchDto.MaxBuildYear" placeholder="Enter maximum build year" />
<br />
<select @bind="@propertySearchDto.CityId">
    <option value="">-- Select City --</option>
    @foreach (var c in cities)
    {
        <option value="@c.Id">@c.CityName</option>
    }
</select>
<select @bind="@propertySearchDto.CategoryId">
    <option value="">-- Select Category --</option>
    @foreach (var c in categories)
    {
        <option value="@c.Id">@c.CategoryName</option>
    }
</select>
<br />
<button @onclick="GetPropertiesBySearch">Search</button>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (hastried && properties.Count < 1)
{
    <p>No properties found</p>
}

@if (properties.Count > 0)
{
    foreach (var p in properties)
    {
        <p>Id: @p.Id</p>
        <p>Address: @p.Address</p>
        <p>Price: @p.Price</p>
        <p>MonthlyFee: @p.MonthlyFee</p>
        <p>YearlyFee: @p.YearlyFee</p>
        <p>LivingAreaKvm: @p.LivingAreaKvm</p>
        <p>AncillaryAreaKvm: @p.AncillaryAreaKvm</p>
        <p>LandAreaKvm: @p.LandAreaKvm</p>
        <p>Description: @p.Description</p>
        <p>NumberOfRooms: @p.NumberOfRooms</p>
        <p>BuildYear: @p.BuildYear</p>
        <p>CreatedAt: @p.CreatedAt</p>
        <p>RealtorName: @p.RealtorName</p>
        <p>CityName: @p.CityName</p>
        <p>CategoryName: @p.CategoryName</p>

        foreach (var i in p.ImageUrls)
        {
            <img src="@i" />
        }
    }
}

@code {
    private List<Services.PropertyReadDto>? properties = new();
    private List<Services.CityReadDto>? cities = new();
    private List<Services.CategoryReadDto> categories = new();
    private Services.PropertySearchDto propertySearchDto = new();
    private bool isLoading = false;
    private bool hastried = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // cities = await cityService.GetAllCitiesAsync();
            categories = await categoryService.GetAllCategoryAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task GetPropertiesBySearch()
    {
        isLoading = true;
        hastried = true;

        try
        {
            properties = await propertyService.GetPropertiesBySearch(propertySearchDto);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

}