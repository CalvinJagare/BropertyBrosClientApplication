@page "/TestPageCreateProperty"
@using BropertyBrosClientApplication.DTO.Properties
@using BropertyBrosClientApplication.Services
@inject PropertyService PropertyService
@rendermode InteractiveServer

@*Author: Daniel*@

<h1>Create Property</h1>
<input type="text" @bind="newProperty.Address" placeholder="Enter Address"/>
<h3>Price</h3>
<br />
<input type="text" @bind="newProperty.Price" placeholder="Enter Price" />
<h3>MontlyFee</h3>
<br />
<input type="text" @bind="newProperty.MonthlyFee" placeholder="Enter MontlyFee" />
<h3>YearlyFee</h3>
<br />
<input type="text" @bind="newProperty.YearlyFee"  />
<h3>LivingAreaKvm</h3>
<br />
<input type="text" @bind="newProperty.LivingAreaKvm"  />
<h3>AncillaryAreaKvm</h3>
<br />
<input type="text" @bind="newProperty.AncillaryAreaKvm"  />
<h3>LandAreaKvm</h3>
<br />
<input type="text" @bind="newProperty.LandAreaKvm"  />
<h3>Description</h3>
<br />
<input type="text" @bind="newProperty.Description"  />
<h3>NumberOfRooms</h3>
<br />
<input type="text" @bind="newProperty.NumberOfRooms"  />
<h3>BuildYear</h3><br />
<input type="text" @bind="newProperty.BuildYear"  />
<div>
	<label>Image URLs:</label>
	@for (int i = 0; i < newProperty.ImageUrls.Count; i++)
	{
		<input class="form-control mb-2"
		@bind="newProperty.ImageUrls[i]" />
	}

	<button type="button" class="btn btn-secondary mb-3" @onclick="AddImageUrl">
		Add Image URL
	</button>
</div>

@* <input type="text" @bind="newProperty.ImageUrls" /> Behöver fixas *@ 

<button class="btn btn-primary" @onclick="CreateProperty">Create Property</button>

@if (isLoading)
{
	<p>Loading...</p>
}
else if (createdProperty != null)
{
	<div class="mt-3">
		<h2>Property Created</h2>
		<p><strong>ID:</strong> @createdProperty.Id</p>
		<p><strong>Address:</strong> @createdProperty.Address</p>
		<p><strong>Price:</strong> @createdProperty.Price</p>
		<p><strong>Monthly Fee:</strong> @createdProperty.MonthlyFee</p>
		<p><strong>Yearly Fee:</strong> @createdProperty.YearlyFee</p>
		<p><strong>Living Area Kvm:</strong> @createdProperty.LivingAreaKvm</p>
		<p><strong>Ancillary Area Kvm:</strong> @createdProperty.AncillaryAreaKvm</p>
		<p><strong>Land Area Kvm:</strong> @createdProperty.LandAreaKvm</p>
		<p><strong>Description:</strong> @createdProperty.Description</p>
		<p><strong>Number of Rooms:</strong> @createdProperty.NumberOfRooms</p>
		<p><strong>Build Year:</strong> @createdProperty.BuildYear</p>
		<p><strong>Image URLs:</strong> @createdProperty.ImageUrls</p>
	</div>
}
else if (hasTried && createdProperty == null)
{
	<p>Failed to create category.</p>
}

@code {
	private List<PropertyReadDto>? properties;
	private PropertyCreateDto newProperty = new PropertyCreateDto();
	private PropertyReadDto? createdProperty;
	private bool isLoading = false;
	private bool hasTried = false;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			properties = await PropertyService.GetAllPropertiesAsync();
			newProperty.RealtorId = 6;
			newProperty.CityId = 2;
			newProperty.CategoryId = 1;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading categories: {ex.Message}");
		}
	}

	private async Task CreateProperty()
	{
		isLoading = true;
		hasTried = true;
		createdProperty = null;
		StateHasChanged();

		try
		{	
			newProperty.RealtorId = 6;
			newProperty.CityId = 2;
			newProperty.CategoryId = 1;

			createdProperty = await PropertyService.CreatePropertyAsync(newProperty);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error creating property: {ex.Message}");
		}
		finally
		{
			isLoading = false;
			StateHasChanged();
		}
	}

	private void AddImageUrl()
	{
		if (newProperty.ImageUrls == null)
			newProperty.ImageUrls = new List<string>();

		newProperty.ImageUrls.Add(string.Empty);
	}
}
