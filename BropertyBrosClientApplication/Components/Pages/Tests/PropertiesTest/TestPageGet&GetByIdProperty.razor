@page "/TestGetProperty"
@using BropertyBrosClientApplication.DTO.Properties
@using BropertyBrosClientApplication.Services
@inject PropertyService PropertyService
@rendermode InteractiveServer

@*Author: Daniel*@
<h1>Get Properties</h1>
@if (properties == null)
{
    <p>Loading...</p>
}
else
{
    <ul>
        @foreach (var property in properties)
        {
            <li>Address: @property.Address</li>
            <li>Price: @property.Price</li>
            <li>Description: @property.Description</li>
            <li>Rooms: @property.NumberOfRooms</li>

        }
    </ul>
}

<h1>Get Property by Id</h1>

<input type="number" @bind="propertyId" placeholder="Enter Property ID" />
<button class="btn btn-primary" @onclick="GetProperty">Get Property</button>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (property != null)
{
    <div class="mt-3">
        <h2>Property Details</h2>
        <p><strong>ID:</strong> @property.Id</p>
        <p><strong>Name:</strong> @property.Address</p>
        <p><strong>Price:</strong> @property.Price</p>
        <p><strong>MontlyFee:</strong>@property.MonthlyFee</p>
        <p><strong>YearlyFee:</strong> @property.YearlyFee</p>
        <p><strong>LivingAreaKvm</strong> @property.LivingAreaKvm</p>
        <p><strong>AncillaryAreaKvm:</strong>@property.AncillaryAreaKvm</p>
        <p><strong>LandAreaKvm:</strong>@property.LandAreaKvm</p>
        <p><strong>Description:</strong>@property.Description</p>
        <p><strong>NumberOfRooms:</strong>@property.NumberOfRooms</p>
        <p><strong>BuildYear</strong>@property.BuildYear</p>
        @for (int i = 0; i < property.ImageUrls.Count; i++)
        {
            var index = i; // avoid modified closure issue
            <input class="form-control mb-2"
                   value="@property.ImageUrls.ToList()[index]"
                   @oninput="e => UpdateImageUrl(index, e.Value?.ToString())" />
        }



    </div>
}
else if (hasTried && property == null)
{
    <p>No category found with ID: @propertyId</p>
}

@code {
    private List<Services.PropertyReadDto>? properties;
    private int propertyId;
    private Services.PropertyReadDto? property;
    private bool isLoading = false;
	private bool hasTried = false;

	protected override async Task OnInitializedAsync()
	{
		properties = await PropertyService.GetAllPropertiesAsync();
	}

	private async Task GetProperty()
	{
		isLoading = true;
		hasTried = true;
		property = null;

		try
		{
			property = await PropertyService.GetPropertyByIdAsync(propertyId);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error fetching property: {ex.Message}");
		}
		finally
		{
			isLoading = false;
		}
	}

    private void UpdateImageUrl(int index, string? value)
    {
        if (value is null) return;
        var list = property.ImageUrls.ToList();
        list[index] = value;
        property.ImageUrls = list;
    }
}
