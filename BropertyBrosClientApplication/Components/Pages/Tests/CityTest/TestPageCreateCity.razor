@page "/testpagecreatecity"
@using BropertyBrosClientApplication.DTO.City
@using BropertyBrosClientApplication.Services
@inject CityService CityService
@rendermode InteractiveServer

@* Author: Arlind *@
<h1>Create City</h1>

<input type="text" @bind="newCity.CityName" placeholder="Enter City Name" />
<button class="btn btn-primary" @onclick="CreateCity">Create City</button>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (createdCity != null)
{
    <div class="mt-3">
        <h2>City Created</h2>
        <p><strong>ID:</strong> @createdCity.Id</p>
        <p><strong>Name:</strong> @createdCity.CityName</p>
    </div>
}
else if (hasTried && createdCity == null)
{
    <p>Failed to create city.</p>
}

@code {
    private List<Services.CityReadDto>? cities;
    private Services.CityCreateDto newCity = new();
    private Services.CityReadDto? createdCity;
    private bool isLoading = false;
    private bool hasTried = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cities = await CityService.GetAllCitiesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cities: {ex.Message}");
        }
    }

    private async Task CreateCity()
    {
        if (string.IsNullOrWhiteSpace(newCity.CityName))
        {
            Console.WriteLine("City name cannot be empty.");
            return;
        }

        isLoading = true;
        hasTried = true;
        createdCity = null;
        StateHasChanged();

        try
        {
            createdCity = await CityService.CreateCityAsync(newCity);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating city: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
