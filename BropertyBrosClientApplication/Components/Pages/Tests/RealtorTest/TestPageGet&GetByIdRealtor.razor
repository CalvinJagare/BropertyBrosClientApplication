@page "/testpagegetrealtors"
@using BropertyBrosClientApplication.DTO.Realtor
@using BropertyBrosClientApplication.Services
@inject RealtorService realtorService
@rendermode InteractiveServer

@* Author: Emil, AI *@
<h1>Get All Realtors</h1>
@if (realtors == null)
{
    <p>Loading...</p>
}
else
{
    <ul>
        @foreach (var r in realtors)
        {
            <li>@r.FirstName @r.LastName</li>
            <img src="@r.ProfileUrl"/>
        }
    </ul>
}

<h1>Get Realtor by Id</h1>

<input type="number" @bind="realtorId" placeholder="Enter Realtor ID" />
<button class="btn btn-primary" @onclick="GetRealtor">Get Realtor</button>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (realtor != null)
{
    <div class="mt-3">
        <h2>Realtor Details</h2>
        <p><strong>ID:</strong> @realtor.Id</p>
        <p><strong>Name:</strong> @realtor.FirstName @realtor.LastName</p>
        <img src="@realtor.ProfileUrl" />
    </div>
}
else if (hastried && realtor == null)
{
    <p>No realtor found with ID: @realtorId</p>
}

@code {
    private List<Services.RealtorReadDto>? realtors;
    private int realtorId;
    private Services.RealtorReadDto? realtor;
    private bool isLoading = false;
    private bool hastried = false;


    protected override async Task OnInitializedAsync()
    {
        realtors = await realtorService.GetAllRealtorsAsync();
    }

    private async Task GetRealtor()
    {
        isLoading = true;
        hastried = true;
        realtor = null;

        try
        {
            realtor = await realtorService.GetRealtorByIdAsync(realtorId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

}