@page "/testpagedeleterealtor"
@using BropertyBrosClientApplication.DTO.Realtor
@using BropertyBrosClientApplication.Services
@inject RealtorService realtorService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@* Author: Emil, AI *@
<h1>Delete Realtor</h1>

@if (isLoading)
{
    <p>Loading realtors...</p>
}
else if (realtors == null || realtors.Count == 0)
{
    <p class="text-danger">No realtors available to delete.</p>
}
else if (isDeleted)
{
    <p class="text-success">Realtor deleted successfully!</p>
}
else
{
    <div>
        <label for="realtorSelect">Select a realtor to delete:</label>
        <select id="realtorSelect" @bind="selectRealtorId">
            <option value="">-- Select a realtor --</option>
            @foreach (var r in realtors)
            {
                <option value="@r.Id">@r.FirstName @r.LastName</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="LoadRealtorDetails" disabled="@(string.IsNullOrEmpty(selectRealtorId.ToString()))">Load</button>
    </div>

    @if (realtorToDelete != null)
    {
        <p>Are you sure you want to delete the realtor: <strong>@realtorToDelete.FirstName @realtorToDelete.LastName</strong>?</p>
        <button class="btn btn-danger" @onclick="DeleteRealtor">Delete</button>
        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
    }
}

@if (deleteFailed)
{
    <p class="text-danger">Failed to delete realtor. Please try again later.</p>
}

@code {
    private List<RealtorReadDto>? realtors;
    private int? selectRealtorId;
    private RealtorReadDto? realtorToDelete;
    private bool isLoading = true;
    private bool isDeleted = false;
    private bool deleteFailed = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            realtors = await realtorService.GetAllRealtorsAsync(); // Fetch all categories
        }
        catch
        {
            realtors = null; // Handle failure to load categories
        }
        finally
        {
            isLoading = false; // Stop loading indicator
        }
    }

    private async Task LoadRealtorDetails()
    {
        if (selectRealtorId.HasValue)
        {
            try
            {
                realtorToDelete = await realtorService.GetRealtorByIdAsync(selectRealtorId.Value); // Fetch selected category details
            }
            catch
            {
                realtorToDelete = null; // Handle failure to load category details
            }
        }
    }

    private async Task DeleteRealtor()
    {
        if (selectRealtorId.HasValue)
        {
            try
            {
                isLoading = true; // Show loading indicator during deletion
                await realtorService.DeleteRealtorAsync(selectRealtorId.Value); // Call the delete method
                isDeleted = true; // Mark as successfully deleted
                realtors = realtors?.Where(c => c.Id != selectRealtorId.Value).ToList(); // Remove deleted category from the list
                realtorToDelete = null; // Clear the selected category
            }
            catch
            {
                deleteFailed = true; // Mark as failed to delete
            }
            finally
            {
                isLoading = false; // Stop loading indicator
            }
        }
    }

    private void CancelDelete()
    {
        realtorToDelete = null; // Clear the selected category
    }
}
