@page "/testpagegetrealtorandproperties"
@using BropertyBrosClientApplication.DTO.Properties
@using BropertyBrosClientApplication.DTO.Realtor
@using BropertyBrosClientApplication.Services
@using BropertyBrosClientApplication.Services.Property
@inject RealtorService realtorService
@inject PropertyService propertyService
@rendermode InteractiveServer

@* Author: Emil, AI *@
<h1>Get properties for realtor ID: </h1>

<input type="number" @bind="realtorId" placeholder="Enter Realtor ID" />
<button class="btn btn-primary" @onclick="GetRealtorAndProperties">Get Realtor</button>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (realtor != null)
{
    <div class="mt-3">
        <h2>Realtor Details</h2>
        <p><strong>ID:</strong> @realtor.Id</p>
        <p><strong>Name:</strong> @realtor.FirstName @realtor.LastName</p>
        <img src="@realtor.ProfileUrl" />
    </div>
}
else if (hastried && realtor == null)
{
    <p>No realtor found with ID: @realtorId</p>
}

@if (properties.Count > 0)
{
    foreach (var p in properties)
    {
        <p>Category: @p.CategoryName</p>
        <p>City: @p.CityName</p>
        <p>Address: @p.Address</p>
        <p>Price: @p.Price</p>
        <p>@p.Description</p>
        foreach (var i in p.ImageUrls)
        {
            <img src="@i" />
        }
    }
}

@code {
    private List<Services.PropertyReadDto>? properties = new();
    private int realtorId;
    private Services.RealtorReadDto? realtor;
    private bool isLoading = false;
    private bool hastried = false;

    private async Task GetRealtorAndProperties()
    {
        isLoading = true;
        hastried = true;
        realtor = null;

        try
        {
            realtor = await realtorService.GetRealtorByIdAsync(realtorId);
            // properties = await propertyService.GetPropertiesByRealtor(realtorId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

}