@page "/TestPageCreateRealtorFirm"
@* @using BropertyBrosClientApplication.DTO.Realtor *@
@using BropertyBrosClientApplication.DTO.RealtorFirm
@using BropertyBrosClientApplication.Services
@inject RealtorFirmService realtorFirmService;
@* @inject RealtorService realtorService *@
@rendermode InteractiveServer

@* Author: Nayab *@
<h1>Create Realtor Firm</h1>

<input type="text" @bind="newRealtorFirm.CompanyName" placeholder="Enter Company Name" />
<input type="text" @bind="newRealtorFirm.Description" placeholder="Enter Description" />
<input type="text" @bind="newRealtorFirm.LogoUrl" placeholder="Enter URL to Company Logo" />
<input type="text" @bind="newRealtorFirm.WebsiteUrl" placeholder="Enter URL to Official Website" />
@* <input type="number" @bind="newRealtor.RealtorFirmId" placeholder="Enter realtorfirm id" /> *@
<button class="btn btn-primary" @onclick="CreateRealtorFirm">Create Realtor Firm</button>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (createdRealtorFirm != null)
{
    <div class="mt-3">
        <h2>Realtor created</h2>
        <p><strong>ID:</strong> @createdRealtorFirm.Id</p>
        <p><strong>Name:</strong> @createdRealtorFirm.CompanyName </p>
    </div>
}
else if (hasTried && createdRealtorFirm == null)
{
    <p>Failed to create realtor firm.</p>
}

@if (realtorFirms.Count > 0)
{
    foreach (var r in realtorFirms)
    {
        <p>@r.CompanyName</p>
    }
}

@code {
    // private List<RealtorFirmReadDto> realtorFirms;
    private List<RealtorFirmReadDto> realtorFirms = new();
    private RealtorFirmCreateDto newRealtorFirm = new RealtorFirmCreateDto();
    private RealtorFirmReadDto? createdRealtorFirm;
    private bool isLoading = false;
    private bool hasTried = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            realtorFirms = await realtorFirmService.GetAllRealtorFirmsAsync();
            // realtorFirms = await realtorFirmService.GetAllRealtorFirmsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Realtor Firms: {ex.Message}");
        }
    }

    private async Task CreateRealtorFirm()
    {
        if (string.IsNullOrWhiteSpace(newRealtorFirm.CompanyName))
        {
            Console.WriteLine("Company name cannot be empty.");
            return;
        }
        if (string.IsNullOrWhiteSpace(newRealtorFirm.Description))
        {
            Console.WriteLine("Dicription cannot be empty.");
            return;
        }
        if (string.IsNullOrWhiteSpace(newRealtorFirm.LogoUrl))
        {
            Console.WriteLine("Logo Url cannot be empty.");
            return;
        }
        if (string.IsNullOrWhiteSpace(newRealtorFirm.WebsiteUrl))
        {
            Console.WriteLine("WebsiteUrl cannot be empty.");
            return;
        }
        

        isLoading = true;
        hasTried = true;
        createdRealtorFirm = null;
        StateHasChanged();

        try
        {
            createdRealtorFirm = await realtorFirmService.CreateRealtorFirmAsync(newRealtorFirm);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating Realtor Firm: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
