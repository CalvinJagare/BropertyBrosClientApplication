@page "/TestPageDeleteCategory"
@using BropertyBrosClientApplication.DTO.CategoryDto
@using BropertyBrosClientApplication.Services
@inject CategoryService CategoryService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@* Author: Calvin, AI *@
<h1>Delete Category</h1>

@if (isLoading)
{
    <p>Loading categories...</p>
}
else if (categories == null || categories.Count == 0)
{
    <p class="text-danger">No categories available to delete.</p>
}
else if (isDeleted)
{
    <p class="text-success">Category deleted successfully!</p>   
}
else
{
    <div>
        <label for="categorySelect">Select a category to delete:</label>
        <select id="categorySelect" @bind="selectedCategoryId">
            <option value="">-- Select a category --</option>
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.CategoryName</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="LoadCategoryDetails" disabled="@(string.IsNullOrEmpty(selectedCategoryId.ToString()))">Load</button>
    </div>

    @if (categoryToDelete != null)
    {
        <p>Are you sure you want to delete the category: <strong>@categoryToDelete.CategoryName</strong>?</p>
        <button class="btn btn-danger" @onclick="DeleteCategory">Delete</button>
        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
    }
}

@if (deleteFailed)
{
    <p class="text-danger">Failed to delete category. Please try again later.</p>
}

@code {
    private List<Services.CategoryReadDto>? categories;
    private int? selectedCategoryId;
    private Services.CategoryReadDto? categoryToDelete;
    private bool isLoading = true;
    private bool isDeleted = false;
    private bool deleteFailed = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await CategoryService.GetAllCategoryAsync(); // Fetch all categories
        }
        catch
        {
            categories = null; // Handle failure to load categories
        }
        finally
        {
            isLoading = false; // Stop loading indicator
        }
    }

    private async Task LoadCategoryDetails()
    {
        if (selectedCategoryId.HasValue)
        {
            try
            {
                categoryToDelete = await CategoryService.GetCategoryByIdAsync(selectedCategoryId.Value); // Fetch selected category details
            }
            catch
            {
                categoryToDelete = null; // Handle failure to load category details
            }
        }
    }

    private async Task DeleteCategory()
    {
        if (selectedCategoryId.HasValue)
        {
            try
            {
                isLoading = true; // Show loading indicator during deletion
                await CategoryService.DeleteCategoryAsync(selectedCategoryId.Value); // Call the delete method
                isDeleted = true; // Mark as successfully deleted
                categories = categories?.Where(c => c.Id != selectedCategoryId.Value).ToList(); // Remove deleted category from the list
                categoryToDelete = null; // Clear the selected category
            }
            catch
            {
                deleteFailed = true; // Mark as failed to delete
            }
            finally
            {
                isLoading = false; // Stop loading indicator
            }
        }
    }

    private void CancelDelete()
    {
        categoryToDelete = null; // Clear the selected category
    }

    private void GoBackToCategories()
    {
        NavigationManager.NavigateTo("/categories"); // Redirect to the categories list
    }
}
