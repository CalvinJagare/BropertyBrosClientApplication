@page "/testpageupdatecategory"
@using BropertyBrosClientApplication.DTO.CategoryDto
@using BropertyBrosClientApplication.Services
@inject CategoryService CategoryService
@rendermode InteractiveServer

@* Author: AI *@
<h1>Update Category</h1>

<div>
    <label for="categoryId">Category ID:</label>
    <input id="categoryId" @bind="CategoryId" type="number" />
    <button @onclick="LoadCategory">Load Category</button>
</div>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (CategoryToUpdate != null)
{
    <EditForm Model="CategoryToUpdate" OnValidSubmit="UpdateCategory">
        <div>
            <label for="categoryName">Category Name:</label>
            <input id="categoryName" @bind="CategoryToUpdate.CategoryName" />
        </div>
        <button type="submit">Update</button>
    </EditForm>
}
else if (ErrorMessage != null)
{
    <p style="color: red;">@ErrorMessage</p>
}

@code {
    private int CategoryId;
    private CategoryCreateDto CategoryToUpdate = new();
    private bool IsLoading = false;
    private string? ErrorMessage;

    private async Task LoadCategory()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            var category = await CategoryService.GetCategoryByIdAsync(CategoryId);
            CategoryToUpdate = new CategoryCreateDto
                {
                    CategoryName = category.CategoryName
                };
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load category: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task UpdateCategory()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            await CategoryService.UpdateCategoryAsync(CategoryId, CategoryToUpdate);
            ErrorMessage = "Category updated successfully!";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to update category: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }
}