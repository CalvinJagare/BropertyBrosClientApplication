@page "/realtordetails/{realtorId:int}"
@inject IRealtorService realtorService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@* Author: Emil, Calvin *@
@if (string.IsNullOrEmpty(errorMessage) == false)
{
    <div class="alert alert-danger">
        <p>@errorMessage</p>
    </div>
}
@if (string.IsNullOrEmpty(responseMessage) == false)
{
    <div class="alert alert-success">
        <p>Realtor Added!</p>
    </div>
}

<AuthorizeView Roles="Admin,User" Context="authContext">
    <Authorized>
        <div class="container">
            <div class="d-flex justify-content-center align-items-center vh-100">
                <div class="container">
                    <h1 class="dashboard-title text-center mb-4">@realtor.FirstName @realtor.LastName</h1>
                    <div class="card shadow-sm p-4">
                        <div class="d-flex flex-row">
                            <div class="d-flex flex-column w-50">
                                <img src="@realtor.ProfileUrl" height="400" class="align-self-center" />
                            </div>
                            <div class="d-flex flex-column w-50 text-center justify-content-between">
                                <div>
                                    <p>@realtor.PhoneNumber</p>
                                    <p>@realtor.Email</p>
                                    <p>@realtor.CompanyName</p>
                                </div>
                                <a href="@realtor.WebsiteUrl">
                                    <img src="@realtor.LogoUrl" height="200" class="align-self-center" />
                                </a>
                            </div>
                        </div>
                    </div>

                    <EditForm Model="dto" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="firstName" class="form-label">First Name</label>
                            <InputText id="firstName" class="form-control" @bind-Value="dto.FirstName" />
                        </div>

                        <div class="mb-3">
                            <label for="lastName" class="form-label">Last Name</label>
                            <InputText id="lastName" class="form-control" @bind-Value="dto.LastName" />
                        </div>

                        <div class="mb-3">
                            <label for="phoneNumber" class="form-label">Phone Number</label>
                            <InputText id="phoneNumber" class="form-control" @bind-Value="dto.PhoneNumber" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="dto.Email" />
                        </div>

                        <div class="mb-3">
                            <label for="profileUrl" class="form-label">Profile URL</label>
                            <InputText id="profileUrl" class="form-control" @bind-Value="dto.ProfileUrl" />
                        </div>

                        <div class="text-center">
                            <button type="submit" class="btn btn-primary">Update</button>
                        </div>
                    </EditForm>


                    <div class="text-center mt-3">
                        <button class="btn btn-secondary" @onclick="GoBack">Back</button>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="d-flex justify-content-center align-items-center vh-100">
            <div class="text-center alert alert-danger">
                <h3>Admins only</h3>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int RealtorId { get; set; }

    private RealtorReadDto realtor = new();
    private RealtorCreateDto dto = new();
    private List<PropertyReadDto>? properties = new();
    private PropertyReadDto? selectedProperty;
    private int currentSlideIndex = 0; private int? imgIndex;

    string? responseMessage;
    string? errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var realtorResponse = await realtorService.GetRealtorByIdAsync(RealtorId);

            if (realtorResponse.Success)
            {
                realtor = realtorResponse.Data;

                dto.FirstName = realtor.FirstName;
                dto.LastName = realtor.LastName;
                dto.PhoneNumber = realtor.PhoneNumber;
                dto.Email = realtor.Email;
                dto.ProfileUrl = realtor.ProfileUrl;
                dto.RealtorFirmId = realtor.RealtorFirmId;

                StateHasChanged();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await realtorService.UpdateRealtorAsync(RealtorId, dto);
            responseMessage = response.Message;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/realtordashboard");
    }
}
