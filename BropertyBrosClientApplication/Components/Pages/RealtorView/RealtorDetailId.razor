@page "/realtorrealtordetails/"
@inject IRealtorService realtorService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@* Author: Emil, Calvin *@

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <p>@errorMessage</p>
    </div>
}
@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-success">
        <p>@responseMessage</p>
    </div>
}

<AuthorizeView Roles="User" Context="authContext">
    <Authorized>
        <div class="d-flex justify-content-center align-items-center vh-100">
            <div class="card shadow-lg p-4 w-100 d-flex flex-row">
                <div class="box col-md-4 text-center realtor-dashboard-profile me-4">
                    <img src="@realtor.ProfileUrl" alt="Profile Picture" class="profile-picture mb-3" />
                    <h3>@($"{realtor.FirstName} {realtor.LastName}")</h3>
                    <p><strong>Email:</strong> <a href="mailto:@realtor.Email">@realtor.Email</a></p>
                    <p><strong>Phone:</strong> @realtor.PhoneNumber</p>
                    @if (!string.IsNullOrEmpty(realtor.LogoUrl))
                    {
                        <div class="mt-4">
                            <img src="@realtor.LogoUrl" alt="Firm Logo" class="img-thumbnail firm-logo" />
                            <p class="mt-2"><strong>@realtor.CompanyName</strong></p>
                            <p><strong>Website:</strong> <a href="@realtor.WebsiteUrl" target="_blank">@realtor.WebsiteUrl</a></p>
                        </div>
                    }
                    <div class="text-center mt-4">
                        <button class="btn btn-secondary" @onclick="GoBack">Back</button>
                    </div>
                </div>

                <div class="col-md-8">
                    <h4 class="text-center mb-4">Update My Info</h4>
                    <EditForm Model="dto" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="firstName" class="form-label">First Name</label>
                            <InputText id="firstName" class="form-control" @bind-Value="dto.FirstName" />
                        </div>
                        <div class="mb-3">
                            <label for="lastName" class="form-label">Last Name</label>
                            <InputText id="lastName" class="form-control" @bind-Value="dto.LastName" />
                        </div>
                        <div class="mb-3">
                            <label for="phoneNumber" class="form-label">Phone Number</label>
                            <InputText id="phoneNumber" class="form-control" @bind-Value="dto.PhoneNumber" />
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="dto.Email" />
                        </div>
                        <div class="mb-3">
                            <label for="profileUrl" class="form-label">Profile URL</label>
                            <InputText id="profileUrl" class="form-control" @bind-Value="dto.ProfileUrl" />
                        </div>
                        <div class="text-center">
                            <button type="submit" class="btn btn-primary">Update</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="d-flex justify-content-center align-items-center vh-100">
            <div class="text-center alert alert-danger">
                <h3>Admins only</h3>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private RealtorReadDto realtor = new();
    private RealtorCreateDto dto = new();
    string? responseMessage;
    string? errorMessage;
    int userRealtorId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IEnumerable<Claim>? claims = await ((ApiAuthStateProvider)authStateProvider).GetClaims();

            if (claims == null)
            {
                NavigationManager.NavigateTo("users/login");
                return;
            }

            string? rid = claims.FirstOrDefault(x => x.Type == "rid")?.Value;

            if (rid == null)
            {
                return;
            }

            userRealtorId = Convert.ToInt32(rid);

            var realtorResponse = await realtorService.GetRealtorByIdAsync(userRealtorId);

            if (realtorResponse.Success)
            {
                realtor = realtorResponse.Data;

                dto.FirstName = realtor.FirstName;
                dto.LastName = realtor.LastName;
                dto.PhoneNumber = realtor.PhoneNumber;
                dto.Email = realtor.Email;
                dto.ProfileUrl = realtor.ProfileUrl;
                dto.RealtorFirmId = realtor.RealtorFirmId;

                StateHasChanged();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await realtorService.UpdateRealtorAsync(userRealtorId, dto);
            responseMessage = response.Message;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/realtordashboard");
    }
}
