@page "/updaterealtor"
@inject IRealtorService realtorService
@inject IRealtorFirmService realtorFirmService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@* Author: Emil *@
@* Behöver Fixa ID Intag för Firms *@

<AuthorizeView Roles="Admin" Context="authContext">
    <Authorized>
        <div class="d-flex justify-content-center align-items-center vh-100">
            <div class="container">
                <h1 class="dashboard-title text-center mb-4">Update Realtor</h1>
                <div class="card shadow-sm p-4 gradient-card">
                    @if (realtors == null)
                    {
                        <p class="text-center">Loading realtors...</p>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label for="realtorDropdown" class="form-label">Select a Realtor</label>
                            <select id="realtorDropdown" class="form-select" @onchange="ChangeRealtor">
                                <option value="">-- Select a Realtor --</option>
                                @foreach (var realtor in realtors)
                                {
                                    <option value="@realtor.Id">@($"{realtor.FirstName} {realtor.LastName}")</option>
                                }
                            </select>
                        </div>
                    }
                    @if (realtor != null)
                    {
                        <EditForm Model="realtor" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="firstName" class="form-label">First Name</label>
                                <InputText id="firstName" class="form-control" @bind-Value="realtor.FirstName" />
                            </div>

                            <div class="mb-3">
                                <label for="lastName" class="form-label">Last Name</label>
                                <InputText id="lastName" class="form-control" @bind-Value="realtor.LastName" />
                            </div>

                            <div class="mb-3">
                                <label for="phoneNumber" class="form-label">Phone Number</label>
                                <InputText id="phoneNumber" class="form-control" @bind-Value="realtor.PhoneNumber" />
                            </div>

                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" class="form-control" @bind-Value="realtor.Email" />
                            </div>

                            <div class="mb-3">
                                <label for="profileUrl" class="form-label">Profile URL</label>
                                <InputText id="profileUrl" class="form-control" @bind-Value="realtor.ProfileUrl" />
                            </div>

                            <div class="mb-3">
                                <label for="realtorFirmDropdown" class="form-label">Realtor Firm</label>
                                <select id="realtorFirmDropdown" class="form-select" @bind="realtor.RealtorFirmId">
                                    @if (realtorFirms.Count > 0)
                                    {
                                        @foreach (var r in realtorFirms)
                                        {
                                            <option value="@r.Id">@($"{r.CompanyName}")</option>
                                        }
                                    }
                                </select>
                            </div>

                            <div class="text-center">
                                <button type="submit" class="btn btn-primary">Update</button>
                            </div>
                        </EditForm>
                    }
                </div>

                <div class="text-center mt-3">
                    <button class="btn btn-secondary" @onclick="GoBack">Back</button>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="d-flex justify-content-center align-items-center vh-100">
            <div class="text-center alert alert-danger">
                <h3>Admins only</h3>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    public int? realtorId { get; set; } = null;
    private List<RealtorReadDto>? realtors = new();
    private List<RealtorFirmReadDto>? realtorFirms = new();
    private RealtorCreateDto? realtor;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var realtorsResponse = await realtorService.GetAllRealtorsAsync();

            if (realtorsResponse.Success)
            {
                realtors = realtorsResponse.Data;
            }

            var realtorFirmsResponse = await realtorFirmService.GetAllRealtorFirms();

            if (realtorFirmsResponse.Success)
            {
                realtorFirms = realtorFirmsResponse.Data!;
            }

            StateHasChanged();
        }
    }

    private async Task ChangeRealtor(ChangeEventArgs e)
    {
        if (int.TryParse((string?)e.Value, out int selectedId))
        {
            realtorId = selectedId;
            var realtorResponse = await realtorService.GetRealtorByIdAsync(realtorId.Value);

            if (realtorResponse.Success)
            {
                realtor = new()
                    {
                        FirstName = realtorResponse.Data.FirstName,
                        LastName = realtorResponse.Data.LastName,
                        PhoneNumber = realtorResponse.Data.PhoneNumber,
                        Email = realtorResponse.Data.Email,
                        ProfileUrl = realtorResponse.Data.ProfileUrl,
                        RealtorFirmId = realtorResponse.Data.RealtorFirmId
                    };

                StateHasChanged();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        await realtorService.UpdateRealtorAsync(realtorId.Value, realtor);
        NavigationManager.NavigateTo("/realtoroverview");
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
