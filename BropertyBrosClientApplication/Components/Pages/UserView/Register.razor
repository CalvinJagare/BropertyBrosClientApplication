@page "/users/register"
@using BropertyBrosClientApplication.Services
@inject IClient httpClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<h3>Register</h3>
@if(string.IsNullOrEmpty(message) == false)
{
	<div class="alert alert-danger">
		<p>@message</p>
	</div>
}


<div>
	<EditForm Model="RegistrationUserModel" OnValidSubmit="HandleRegistration">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="form-group">
			<label for="email">Email</label>
			<InputText id="email" type="email" class="form-control" @bind-Value="RegistrationUserModel.Email" />
			<ValidationMessage For="@(() => RegistrationUserModel.Email)" />
		</div
		<div class="form-group">
			<label for="password">Password</label>
			<InputText id="password" type="password" class="form-control" @bind-Value="RegistrationUserModel.Password" />
			<ValidationMessage For="@(() => RegistrationUserModel.Password)" />
		</div>
		<div>
			<label for="firstname">First Name</label>
			<InputText id="firstname" type="firstname" class="form-control" @bind-Value="RegistrationUserModel.FirstName" />
			<ValidationMessage For="@(() => RegistrationUserModel.FirstName)" />
		</div>
		<div>
			<label for="lastname">Last Name</label>
			<InputText id="lastname" type="lastname" class="form-control" @bind-Value="RegistrationUserModel.LastName" />
			<ValidationMessage For="@(() => RegistrationUserModel.LastName)" />
		</div>
		<button type="submit" class="btn btn-primary">Register</button>
	</EditForm>
</div>
@code {
	UserDto RegistrationUserModel = new UserDto();
	string message = string.Empty;

	private async Task HandleRegistration()
	{
		try
		{
			await httpClient.RegisterAsync(RegistrationUserModel);
			NavigationManager.NavigateTo("/users/login");
		}
		catch(ApiException aex)
		{
			if(aex.StatusCode >= 200 && aex.StatusCode <= 299)
			{
				NavigationManager.NavigateTo("/users/login");
			}
			message = aex.Response;
		}
	}
}
