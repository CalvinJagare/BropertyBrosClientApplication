@page "/users/change-password"
@using BropertyBrosClientApplication.Services
@using BropertyBrosClientApplication.Services.Auth
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="d-flex justify-content-center align-items-center vh-100 bg-light">
    <div class="card shadow-sm p-4 login-card" style="min-width: 350px;">
        <h3 class="text-center mb-4">Change Password</h3>

        <EditForm Model="PasswordModel" OnValidSubmit="HandlePasswordChange">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger validation-message" />

            <div class="form-floating mb-3">
                <InputText id="currentPassword" type="password" class="form-control" @bind-Value="PasswordModel.CurrentPassword" placeholder="Current Password" />
                <label for="currentPassword">Current Password</label>
                <ValidationMessage For="@(() => PasswordModel.CurrentPassword)" class="text-danger validation-message" />
            </div>

            <div class="form-floating mb-3">
                <InputText id="newPassword" type="password" class="form-control" @bind-Value="PasswordModel.NewPassword" placeholder="New Password" />
                <label for="newPassword">New Password</label>
                <ValidationMessage For="@(() => PasswordModel.NewPassword)" class="text-danger validation-message" />
            </div>

            <div class="form-floating mb-3">
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="PasswordModel.ConfirmNewPassword" placeholder="Confirm New Password" />
                <label for="confirmPassword">Confirm New Password</label>
                <ValidationMessage For="@(() => PasswordModel.ConfirmNewPassword)" class="text-danger validation-message" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Change Password</button>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="alert alert-info mt-3">@Message</div>
            }
        </EditForm>
    </div>
</div>


@code {
    private ChangePasswordDto PasswordModel = new();
    private string Message = string.Empty;

    private async Task HandlePasswordChange()
    {
        try
        {
            var result = await AuthService.ChangePasswordAsync(PasswordModel);
            if (result)
            {
                Message = "Password changed successfully.";
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Message = "Password change failed. Please try again.";
            }
        }
        catch (ApiException ex)
        {
            Message = $"Error: {ex.Message}";
        }
    }
}