@page "/users/change-password"
@using BropertyBrosClientApplication.Services
@using BropertyBrosClientApplication.Services.Auth
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Change Password</h3>

<EditForm Model="PasswordModel" OnValidSubmit="HandlePasswordChange">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="currentPassword">Current Password</label>
        <InputText id="currentPassword" type="password" class="form-control" @bind-Value="PasswordModel.CurrentPassword" />
        <ValidationMessage For="@(() => PasswordModel.CurrentPassword)" />
    </div>

    <div class="form-group">
        <label for="newPassword">New Password</label>
        <InputText id="newPassword" type="password" class="form-control" @bind-Value="PasswordModel.NewPassword" />
        <ValidationMessage For="@(() => PasswordModel.NewPassword)" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm New Password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="PasswordModel.ConfirmNewPassword" />
        <ValidationMessage For="@(() => PasswordModel.ConfirmNewPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">Change Password</button>

    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert alert-info mt-2">@Message</div>
    }
</EditForm>


@code {
    private ChangePasswordDto PasswordModel = new();
    private string Message = string.Empty;

    private async Task HandlePasswordChange()
    {
        try
        {
            var result = await AuthService.ChangePasswordAsync(PasswordModel);
            if (result)
            {
                Message = "Password changed successfully.";
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Message = "Password change failed. Please try again.";
            }
        }
        catch (ApiException ex)
        {
            Message = $"Error: {ex.Message}";
        }
    }
}