@page "/users/login"
@using BropertyBrosClientApplication.Services
@using BropertyBrosClientApplication.Services.Auth
@using System.Diagnostics
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<h3>Login</h3>

<div>
	<Microsoft.AspNetCore.Components.Forms.EditForm Model="LoginModel" OnValidSubmit="HandleLogin" FormName="Login">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="form-group">
			<label for="email">Email</label>
			<InputText id="email" type="email" class="form-control" @bind-Value="LoginModel.Email" />
			<ValidationMessage For="@(() => LoginModel.Email)" />
		</div>
		<div class="form-group">
			<label for="password">Password</label>
			<InputText id="password" type="password" class="form-control" @bind-Value="LoginModel.Password" />
			<ValidationMessage For="@(() => LoginModel.Password)" />
		</div>
		<button type="submit" class="btn btn-primary">Login</button>
	</Microsoft.AspNetCore.Components.Forms.EditForm>
</div>

@code {
	LoginUserDto LoginModel = new LoginUserDto();

	private async Task HandleLogin()
	{
		string message = string.Empty;
		try
		{
			Debug.WriteLine($"LoginModel: {LoginModel.Email}, {LoginModel.Password}");
			var response = await AuthService.AuthAsync(LoginModel);

			if(response)
			{
				NavigationManager.NavigateTo("/");
			}
			message = "Invalid Credentials, please try again."; 
		}
		catch (ApiException aex)
		{
			if (aex.StatusCode >= 200 && aex.StatusCode <= 299)
			{
				NavigationManager.NavigateTo("/users/login");
			}
			message = aex.Response;
		}
	}
}
