@page "/createcategory"
@using BropertyBrosClientApplication.Services
@using BropertyBrosClientApplication.Services.Category
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@* Author: Calvin *@

<AuthorizeView Roles="Admin" Context="authContext">
    <Authorized>
        <div class="d-flex justify-content-center align-items-center vh-100">
            <div class="container">
                <h1 class="dashboard-title text-center mb-4">Create Category</h1>

                <div class="card shadow-sm p-4 gradient-card">
                    <EditForm Model="newCategory" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="categoryName" class="form-label">Category Name</label>
                            <InputText id="categoryName" class="form-control" @bind-Value="newCategory.CategoryName" />
                        </div>

                        <div class="text-center">
                            <button type="submit" class="btn btn-primary" disabled="@string.IsNullOrWhiteSpace(newCategory.CategoryName)" @onclick="Created">Create</button>
                        </div>

                    </EditForm>
                </div>
                <div class="text-center mt-3">
                    <button class="btn btn-secondary" @onclick="GoBack">Back</button>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="d-flex justify-content-center align-items-center vh-100">
            <div class="text-center alert alert-danger">
                <h3>Admins only</h3>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

<div class="text-center text-danger" style="display: @(string.IsNullOrEmpty(errorMessage) ? "none" : "block")">
    @errorMessage
</div>

@code {
    private Services.CategoryCreateDto newCategory = new();
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        var response = await CategoryService.CreateCategory(newCategory);
        if (response.Success)
        {
            NavigationManager.NavigateTo("/categoryoverview");
        }
        else
        {
            errorMessage = "Failed to create category. Please try again.";
        }
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
    private void Created()
    {        
        NavigationManager.NavigateTo("/categoryoverview");
    }
}