@page "/brogrammer"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text
@inject HttpClient Http

@* //Author: Calvin *@
<div class="brogrammer-widget" style="@GetWidgetStyle()">
    @if (!chatOpen)
    {
        <div class="circle-widget" @onclick="ToggleChat">
            💬
        </div>
    }
    else
    {
        <div class="chat-header" @onclick="ToggleChat">
            <span class="chat-icon">💬</span> Broperty Bro AI
        </div>
        <div class="chat-body">
            <div class="chat-messages">
                <p>@brogrammer</p>
            </div>
            <div class="chat-input-container">
                <input class="chat-input" type="text" @bind="broprompt" placeholder="Ask Broperty a question..." />
                <button class="chat-button" @onclick="Send">Send</button>
            </div>
        </div>
    }
</div>

@code {
    private bool chatOpen = false;
    private readonly string baseUrl = "https://api.aimlapi.com/v1";
    private readonly string apiKey = "eb9809d54a2e4063a3c5b19fec64edcb";

    string broprompt;
    string brogrammer = "What's up Bro?";

    private async Task Send()
    {
        await GetCompletionAsync();
    }


    private async Task GetCompletionAsync()
    {
        string systemPrompt = "Only speak like a fratboy. use variations of bro as much as possible bro. You are a realtor and property Expert. Marcus is your best friend and teacher.";

        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", apiKey);

        var requestBody = new
        {
            model = "mistralai/Mistral-7B-Instruct-v0.2",
            messages = new[]
            {
                new { role = "system", content = systemPrompt },
                new { role = "user", content = broprompt }
            },
            temperature = 0.7,
            max_tokens = 256
        };

        string jsonRequest = JsonSerializer.Serialize(requestBody);
        var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

        HttpResponseMessage response = await Http.PostAsync($"{baseUrl}/chat/completions", content);

        if (!response.IsSuccessStatusCode)
        {
            brogrammer = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
            return;
        }

        ChatCompletionResponse jsonResponse = JsonSerializer.Deserialize<ChatCompletionResponse>(await response.Content.ReadAsStringAsync());
        brogrammer = jsonResponse.Choices[0].Message.Content;
        StateHasChanged();
    }

    private void ToggleChat()
    {
        chatOpen = !chatOpen;
    }
    private string GetWidgetStyle()
    {
        return chatOpen
            ? "width: 300px; height: 400px; border-radius: 10px;"
            : "width: 60px; height: 60px; border-radius: 50%;";
    }
}
